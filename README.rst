*****
UBUNTU/DEBIAN INSTRUCTIONS FOR INSTALLING DEV VERSION
*****

Make Sure you have all the requirements installed to run a development server.

Open Assembly Installation
####

We recommend PIP and VirtualEnv to satisfy dependencies.


.. code-block:: bash
	$ sudo apt-get install python-pip
	$ sudo pip install virtualenv

Now setup the structure of the development folder and create the OA virtualenv

.. code-block:: bash
	$ mkdir OA
	$ cd OA
	$ git clone git://github.com/fragro/Open-Assembly.git
	$ mkdir OA_ENV
	$ virtualenv OA_ENV
	$ source OA_ENV/bin/activate
	$ cd Open-Assembly/ver1_0
	$ pip install -r requirements.txt


The MongoDB server
####

.. code-block:: bash
	sudo apt-get install mongodb

Redis
####

Goto http://redis.io/download and download/install the newest stable version or follow these instructions.

If you aren't using Redis for anything else we recommend placing the redis-2.4.17 directory in the OA folder.

.. code-block:: bash
	$ cd ../../

.. code-block:: bash
	$ wget http://redis.googlecode.com/files/redis-2.4.17.tar.gz
	$ tar xzf redis-2.4.17.tar.gz
	$ cd redis-2.4.17
	$ make



Node.js
####



Run the Development Server
####

Now Open a Terminal and Run the Django Server

.. code-block:: bash
	$ python manage.py syncdb (if this fails try it until it succeeds)
	$ python manage.py runserver

Start the Redis Server

.. warning::
	You must run the Redis server before running the node.js or Celery servers

.. code-block:: bash
	$ src/redis-server

In another Terminal Run Celery

.. code-block:: bash
	$ python manage.py celeryd

Go To:

http://localhost:8000/setup_admin/

To create an administrative account with the username 'admin' and password 'password'. Now you can begin to create groups and
test content to develop on. Soon we will release an anonymized exported database to experiment with.

For more debug information in Celery, include:


.. code-block:: bash
	$ python manage.py celeryd -l DEBUG


Push To Production
####

To push to production we recommend Dotcloud.


Using Dotcloud

Requires Setting of Email and Password within Settings and associated EMAIL_PASSWORD in Dotcloud environment variables
http://docs.dotcloud.com/guides/environment/

Another Host

Open Assembly is configured to use dotcloud but you
can use your own host fairly easily, you'll need to change the settings.py file in the project to
reflect your own Redis/MongoDB/Node/Celery Servers.

SOLR
####


.. code-block:: bash
	$ python manage.py build_solr_schema > ../../solr/conf/schema.xml

If you run SOLR from another location, such as a local library, make sure to replace the schema.xml generated by Django
with the schema.xml that your SOLR install is using.